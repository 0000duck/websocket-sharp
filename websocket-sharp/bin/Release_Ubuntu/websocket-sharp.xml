<?xml version="1.0"?>
<doc>
    <assembly>
        <name>/home/starless/Projects/websocket-sharp/websocket-sharp/bin/Release_Ubuntu/websocket-sharp</name>
    </assembly>
    <members>
        <member name="T:WebSocketSharp.Ext">
            <summary>
            Provides a set of static methods for the websocket-sharp.
            </summary>
        </member>
        <member name="M:WebSocketSharp.Ext.AcceptWebSocket(System.Net.Sockets.TcpClient,System.Boolean)">
            <summary>
            Accept a WebSocket connection by the <see cref="T:System.Net.Sockets.TcpListener" />.
            </summary>
            <returns>
            A <see cref="T:WebSocketSharp.Net.WebSockets.TcpListenerWebSocketContext" /> that contains a WebSocket connection.
            </returns>
            <param name="client">
            A <see cref="T:System.Net.Sockets.TcpClient" /> that contains a TCP connection to accept a WebSocket connection from.
            </param>
            <param name="secure">
            A <see cref="T:System.Boolean" /> that indicates a secure connection or not. (<c>true</c> indicates a secure connection.)
            </param>
            <exception cref="T:System.ArgumentNullException">
            Is thrown when the <paramref name="client" /> parameter passed to a method is invalid because it is <see langword="null" />.
            </exception>
        </member>
        <member name="M:WebSocketSharp.Ext.Emit(System.EventHandler,System.Object,System.EventArgs)">
            <summary>
            Emit the specified <see cref="T:System.EventHandler" /> delegate if is not <see langword="null" />.
            </summary>
            <param name="eventHandler">
            An <see cref="T:System.EventHandler" /> to emit.
            </param>
            <param name="sender">
            An <see cref="T:System.Object" /> that emits the <paramref name="eventHandler" />.
            </param>
            <param name="e">
            An <see cref="T:System.EventArgs" /> that contains no event data.
            </param>
        </member>
        <member name="M:WebSocketSharp.Ext.Emit``1(System.EventHandler{``0},System.Object,``0)">
            <summary>
            Emit the specified <b>EventHandler&lt;TEventArgs&gt;</b> delegate if is not <see langword="null" />.
            </summary>
            <param name="eventHandler">
            An <b>EventHandler&lt;TEventArgs&gt;</b> to emit.
            </param>
            <param name="sender">
            An <see cref="T:System.Object" /> that emits the <paramref name="eventHandler" />.
            </param>
            <param name="e">
            A <b>TEventArgs</b> that contains the event data.
            </param>
            <typeparam name="TEventArgs">
            The type of the event data generated by the event.
            </typeparam>
        </member>
        <member name="M:WebSocketSharp.Ext.EqualsAndSaveTo(System.Int32,System.Char,System.Collections.Generic.List{System.Byte})">
            <summary>
            Determines whether the specified <see cref="T:System.Int32" /> equals the specified <see cref="T:System.Char" /> as <see cref="T:System.Byte" />.
            And save this specified <see cref="T:System.Int32" /> as <see cref="T:System.Byte" /> to the specified <strong>List&lt;byte&gt;</strong>.
            </summary>
            <returns>
                <c>true</c> if the <paramref name="value" /> parameter equals the <paramref name="c" /> parameter as <see cref="T:System.Byte" />; otherwise, <c>false</c>.
            </returns>
            <param name="value">
            An <see cref="T:System.Int32" /> to compare.
            </param>
            <param name="c">
            A <see cref="T:System.Char" /> to compare.
            </param>
            <param name="dest">
            A <strong>List&lt;byte&gt;</strong> to save the <paramref name="value" /> as <see cref="T:System.Byte" />.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Is thrown when the <paramref name="value" /> parameter passed to a method is invalid because it is outside the allowable range of values as <see cref="T:System.Byte" />.
            </exception>
        </member>
        <member name="M:WebSocketSharp.Ext.Exists(System.Collections.Specialized.NameValueCollection,System.String)">
            <summary>
            Determines whether the entry with the specified key exists in the specified <see cref="T:System.Collections.Specialized.NameValueCollection" />.
            </summary>
            <returns>
                <c>true</c> if the entry with the <paramref name="name" /> exists in the <paramref name="collection" />; otherwise, <c>false</c>.
            </returns>
            <param name="collection">
            A <see cref="T:System.Collections.Specialized.NameValueCollection" /> that contains the entries.
            </param>
            <param name="name">
            A <see cref="T:System.String" /> that contains the key of the entry to find.
            </param>
        </member>
        <member name="M:WebSocketSharp.Ext.Exists(System.Collections.Specialized.NameValueCollection,System.String,System.String)">
            <summary>
            Determines whether the entry with the specified both key and value exists in the specified <see cref="T:System.Collections.Specialized.NameValueCollection" />.
            </summary>
            <returns>
                <c>true</c> if the entry with the both <paramref name="name" /> and <paramref name="value" /> exists in the <paramref name="collection" />; otherwise, <c>false</c>.
            </returns>
            <param name="collection">
            A <see cref="T:System.Collections.Specialized.NameValueCollection" /> that contains the entries.
            </param>
            <param name="name">
            A <see cref="T:System.String" /> that contains the key of the entry to find.
            </param>
            <param name="value">
            A <see cref="T:System.String" /> that contains the value of the entry to find.
            </param>
        </member>
        <member name="M:WebSocketSharp.Ext.GetAbsolutePath(System.Uri)">
            <summary>
            Gets the absolute path from the specified <see cref="T:System.Uri" />.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that contains the absolute path if got successfully; otherwise, <see langword="null" />.
            </returns>
            <param name="uri">
            A <see cref="T:System.Uri" /> that contains the URI to get the absolute path from.
            </param>
        </member>
        <member name="M:WebSocketSharp.Ext.GetDescription(WebSocketSharp.Net.HttpStatusCode)">
            <summary>
            Gets the description of the HTTP status code using the specified code.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that contains the description of the <paramref name="code" />.
            </returns>
            <param name="code">
            One of <see cref="T:WebSocketSharp.Net.HttpStatusCode" /> values that contains the HTTP status code.
            </param>
        </member>
        <member name="M:WebSocketSharp.Ext.GetName(System.String,System.String)">
            <summary>
            Gets the name from the specified <see cref="T:System.String" /> that contains a pair of name and value are separated by a separator string.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that contains the name if any; otherwise, <c>null</c>.
            </returns>
            <param name="nameAndValue">
            A <see cref="T:System.String" /> that contains a pair of name and value are separated by a separator string.
            </param>
            <param name="separator">
            A <see cref="T:System.String" /> that contains a separator string.
            </param>
        </member>
        <member name="M:WebSocketSharp.Ext.GetNameAndValue(System.String,System.String)">
            <summary>
            Gets the name and value from the specified <see cref="T:System.String" /> that contains a pair of name and value are separated by a separator string.
            </summary>
            <returns>
            A <b>KeyValuePair&lt;string, string&gt;</b> that contains the name and value if any.
            </returns>
            <param name="nameAndValue">
            A <see cref="T:System.String" /> that contains a pair of name and value are separated by a separator string.
            </param>
            <param name="separator">
            A <see cref="T:System.String" /> that contains a separator string.
            </param>
        </member>
        <member name="M:WebSocketSharp.Ext.GetStatusDescription(System.Int32)">
            <summary>
            Gets the description of the HTTP status code using the specified code.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that contains the description of the <paramref name="code" />.
            </returns>
            <param name="code">
            An <see cref="T:System.Int32" /> that contains the HTTP status code.
            </param>
        </member>
        <member name="M:WebSocketSharp.Ext.GetValue(System.String,System.String)">
            <summary>
            Gets the value from the specified <see cref="T:System.String" /> that contains a pair of name and value are separated by a separator string.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that contains the value if any; otherwise, <c>null</c>.
            </returns>
            <param name="nameAndValue">
            A <see cref="T:System.String" /> that contains a pair of name and value are separated by a separator string.
            </param>
            <param name="separator">
            A <see cref="T:System.String" /> that contains a separator string.
            </param>
        </member>
        <member name="M:WebSocketSharp.Ext.IsEmpty(System.String)">
            <summary>
            Determines whether the specified <see cref="T:System.String" /> is a <see cref="F:System.String.Empty" />.
            </summary>
            <returns>
                <c>true</c> if the <paramref name="value" /> parameter is a <see cref="F:System.String.Empty" />; otherwise, <c>false</c>.
            </returns>
            <param name="value">
            A <see cref="T:System.String" /> to test.
            </param>
        </member>
        <member name="M:WebSocketSharp.Ext.IsHostOrder(WebSocketSharp.ByteOrder)">
            <summary>
            Determines whether the specified <see cref="T:WebSocketSharp.ByteOrder" /> is host (this computer architecture) byte order.
            </summary>
            <returns>
                <c>true</c> if the <paramref name="order" /> parameter is host byte order; otherwise, <c>false</c>.
            </returns>
            <param name="order">
            A <see cref="T:WebSocketSharp.ByteOrder" /> to test.
            </param>
        </member>
        <member name="M:WebSocketSharp.Ext.IsNull``1(``0)">
            <summary>
            Determines whether the specified object is <see langword="null" />.
            </summary>
            <returns>
                <c>true</c> if the <paramref name="obj" /> parameter is <see langword="null" />; otherwise, <c>false</c>.
            </returns>
            <param name="obj">
            A <b>class</b> to test.
            </param>
            <typeparam name="T">
            The type of the <paramref name="obj" /> parameter.
            </typeparam>
        </member>
        <member name="M:WebSocketSharp.Ext.IsNullDo``1(``0,System.Action)">
            <summary>
            Determines whether the specified object is <see langword="null" />.
            And invokes the specified <see cref="T:System.Action" /> delegate if the specified object is <see langword="null" />.
            </summary>
            <returns>
                <c>true</c> if the <paramref name="obj" /> parameter is <see langword="null" />; otherwise, <c>false</c>.
            </returns>
            <param name="obj">
            A <b>class</b> to test.
            </param>
            <param name="act">
            An <see cref="T:System.Action" /> delegate that contains the method(s) called if the <paramref name="obj" /> is <see langword="null" />.
            </param>
            <typeparam name="T">
            The type of the <paramref name="obj" /> parameter.
            </typeparam>
        </member>
        <member name="M:WebSocketSharp.Ext.IsNullOrEmpty(System.String)">
            <summary>
            Determines whether the specified <see cref="T:System.String" /> is <see langword="null" /> or <see cref="F:System.String.Empty" />.
            </summary>
            <returns>
                <c>true</c> if the <paramref name="value" /> parameter is <see langword="null" /> or <see cref="F:System.String.Empty" />; otherwise, <c>false</c>.
            </returns>
            <param name="value">
            A <see cref="T:System.String" /> to test.
            </param>
        </member>
        <member name="M:WebSocketSharp.Ext.IsPredefinedScheme(System.String)">
            <summary>
            Determines whether the specified <see cref="T:System.String" /> is predefined scheme.
            </summary>
            <returns>
                <c>true</c> if the <paramref name="scheme" /> parameter is the predefined scheme; otherwise, <c>false</c>.
            </returns>
            <param name="scheme">
            A <see cref="T:System.String" /> to test.
            </param>
        </member>
        <member name="M:WebSocketSharp.Ext.IsValidAbsolutePath(System.String,System.String@)">
            <summary>
            Determines whether the specified <see cref="T:System.String" /> is valid absolute path.
            </summary>
            <returns>
                <c>true</c> if the <paramref name="absPath" /> parameter is valid absolute path; otherwise, <c>false</c>.
            </returns>
            <param name="absPath">
            A <see cref="T:System.String" /> to test.
            </param>
            <param name="message">
            A <see cref="T:System.String" /> that receives a message if the <paramref name="absPath" /> is invalid.
            </param>
        </member>
        <member name="M:WebSocketSharp.Ext.MaybeUri(System.String)">
            <summary>
            Determines whether the specified <see cref="T:System.String" /> is a URI string.
            </summary>
            <returns>
                <c>true</c> if the <paramref name="uriString" /> parameter is maybe a URI string; otherwise, <c>false</c>.
            </returns>
            <param name="uriString">
            A <see cref="T:System.String" /> to test.
            </param>
        </member>
        <member name="M:WebSocketSharp.Ext.NotEqual(System.String,System.String,System.Boolean)">
            <summary>
            Determines whether two specified <see cref="T:System.String" /> objects don't have the same value.
            </summary>
            <returns>
                <c>true</c> if the value of <paramref name="expected" /> parameter isn't the same as the value of <paramref name="actual" /> parameter; otherwise, <c>false</c>.
            </returns>
            <param name="expected">
            The first <see cref="T:System.String" /> to compare.
            </param>
            <param name="actual">
            The second <see cref="T:System.String" /> to compare.
            </param>
            <param name="ignoreCase">
            A <see cref="T:System.Boolean" /> that indicates a case-sensitive or insensitive comparison. (<c>true</c> indicates a case-insensitive comparison.)
            </param>
        </member>
        <member name="M:WebSocketSharp.Ext.ReadBytes(System.IO.Stream,System.Int32)">
            <summary>
            Reads a block of bytes from the specified stream and returns the read data in an array of <see cref="T:System.Byte" />.
            </summary>
            <returns>
            An array of <see cref="T:System.Byte" /> that receives the read data.
            </returns>
            <param name="stream">
            A <see cref="T:System.IO.Stream" /> that contains the data to read.
            </param>
            <param name="length">
            An <see cref="T:System.Int32" /> that contains the number of bytes to read.
            </param>
        </member>
        <member name="M:WebSocketSharp.Ext.ReadBytes(System.IO.Stream,System.Int64)">
            <summary>
            Reads a block of bytes from the specified stream and returns the read data in an array of <see cref="T:System.Byte" />.
            </summary>
            <returns>
            An array of <see cref="T:System.Byte" /> that receives the read data.
            </returns>
            <param name="stream">
            A <see cref="T:System.IO.Stream" /> that contains the data to read.
            </param>
            <param name="length">
            A <see cref="T:System.Int64" /> that contains the number of bytes to read.
            </param>
        </member>
        <member name="M:WebSocketSharp.Ext.ReadBytes(System.IO.Stream,System.Int64,System.Int32)">
            <summary>
            Reads a block of bytes from the specified stream and returns the read data in an array of <see cref="T:System.Byte" />.
            </summary>
            <returns>
            An array of <see cref="T:System.Byte" /> that receives the read data.
            </returns>
            <param name="stream">
            A <see cref="T:System.IO.Stream" /> that contains the data to read.
            </param>
            <param name="length">
            A <see cref="T:System.Int64" /> that contains the number of bytes to read.
            </param>
            <param name="bufferLength">
            An <see cref="T:System.Int32" /> that contains the buffer size in bytes of each internal read.
            </param>
        </member>
        <member name="M:WebSocketSharp.Ext.SubArray``1(``0[],System.Int32,System.Int32)">
            <summary>
            Retrieves a sub-array from the specified <paramref name="array" />. A sub-array starts at the specified element position.
            </summary>
            <returns>
            An array of T that receives a sub-array, or an empty array of T if any problems with the parameters.
            </returns>
            <param name="array">
            An array of T that contains the data to retrieve a sub-array.
            </param>
            <param name="startIndex">
            An <see cref="T:System.Int32" /> that contains the zero-based starting position of a sub-array in the <paramref name="array" />.
            </param>
            <param name="length">
            An <see cref="T:System.Int32" /> that contains the number of elements to retrieve a sub-array.
            </param>
            <typeparam name="T">
            The type of elements in the <paramref name="array" />.
            </typeparam>
        </member>
        <member name="M:WebSocketSharp.Ext.Times(System.Int32,System.Action)">
            <summary>
            Executes the specified <see cref="T:System.Action" /> delegate <paramref name="n" /> times.
            </summary>
            <param name="n">
            An <see cref="T:System.Int32" /> that contains the number of times to execute.
            </param>
            <param name="act">
            An <see cref="T:System.Action" /> delegate that contains the method(s) to execute.
            </param>
        </member>
        <member name="M:WebSocketSharp.Ext.Times(System.Int64,System.Action)">
            <summary>
            Executes the specified <see cref="T:System.Action" /> delegate <paramref name="n" /> times.
            </summary>
            <param name="n">
            A <see cref="T:System.Int64" /> that contains the number of times to execute.
            </param>
            <param name="act">
            An <see cref="T:System.Action" /> delegate that contains the method(s) to execute.
            </param>
        </member>
        <member name="M:WebSocketSharp.Ext.Times(System.UInt32,System.Action)">
            <summary>
            Executes the specified <see cref="T:System.Action" /> delegate <paramref name="n" /> times.
            </summary>
            <param name="n">
            A <see cref="T:System.UInt32" /> that contains the number of times to execute.
            </param>
            <param name="act">
            An <see cref="T:System.Action" /> delegate that contains the method(s) to execute.
            </param>
        </member>
        <member name="M:WebSocketSharp.Ext.Times(System.UInt64,System.Action)">
            <summary>
            Executes the specified <see cref="T:System.Action" /> delegate <paramref name="n" /> times.
            </summary>
            <param name="n">
            A <see cref="T:System.UInt64" /> that contains the number of times to execute.
            </param>
            <param name="act">
            An <see cref="T:System.Action" /> delegate that contains the method(s) to execute.
            </param>
        </member>
        <member name="M:WebSocketSharp.Ext.Times(System.Int32,System.Action{System.UInt64})">
            <summary>
            Executes the specified <b>Action&lt;ulong&gt;</b> delegate <paramref name="n" /> times.
            </summary>
            <param name="n">
            An <see cref="T:System.Int32" /> that contains the number of times to execute.
            </param>
            <param name="act">
            An <b>Action&lt;ulong&gt;</b> delegate that contains the method(s) to execute.
            A <see cref="T:System.UInt64" /> parameter to pass to this method(s) contains the zero-based count of iteration.
            </param>
        </member>
        <member name="M:WebSocketSharp.Ext.Times(System.Int64,System.Action{System.UInt64})">
            <summary>
            Executes the specified <b>Action&lt;ulong&gt;</b> delegate <paramref name="n" /> times.
            </summary>
            <param name="n">
            A <see cref="T:System.Int64" /> that contains the number of times to execute.
            </param>
            <param name="act">
            An <b>Action&lt;ulong&gt;</b> delegate that contains the method(s) to execute.
            A <see cref="T:System.UInt64" /> parameter to pass to this method(s) contains the zero-based count of iteration.
            </param>
        </member>
        <member name="M:WebSocketSharp.Ext.Times(System.UInt32,System.Action{System.UInt64})">
            <summary>
            Executes the specified <b>Action&lt;ulong&gt;</b> delegate <paramref name="n" /> times.
            </summary>
            <param name="n">
            A <see cref="T:System.UInt32" /> that contains the number of times to execute.
            </param>
            <param name="act">
            An <b>Action&lt;ulong&gt;</b> delegate that contains the method(s) to execute.
            A <see cref="T:System.UInt64" /> parameter to pass to this method(s) contains the zero-based count of iteration.
            </param>
        </member>
        <member name="M:WebSocketSharp.Ext.Times(System.UInt64,System.Action{System.UInt64})">
            <summary>
            Executes the specified <b>Action&lt;ulong&gt;</b> delegate <paramref name="n" /> times.
            </summary>
            <param name="n">
            A <see cref="T:System.UInt64" /> that contains the number of times to execute.
            </param>
            <param name="act">
            An <b>Action&lt;ulong&gt;</b> delegate that contains the method(s) to execute.
            A <see cref="T:System.UInt64" /> parameter to pass to this method(s) contains the zero-based count of iteration.
            </param>
        </member>
        <member name="M:WebSocketSharp.Ext.To``1(System.Byte[],WebSocketSharp.ByteOrder)">
            <summary>
            Converts the specified array of <see cref="T:System.Byte" /> to the specified type data.
            </summary>
            <returns>
            A T converted from the <paramref name="src" />, or a default value of T
            if the <paramref name="src" /> is an empty array of <see cref="T:System.Byte" />
            or if the types of T aren't the <see cref="T:System.Boolean" />, <see cref="T:System.Char" />, <see cref="T:System.Double" />,
            <see cref="T:System.Single" />, <see cref="T:System.Int32" />, <see cref="T:System.Int64" />, <see cref="T:System.Int16" />,
            <see cref="T:System.UInt32" />, <see cref="T:System.UInt64" />, <see cref="T:System.UInt16" />.
            </returns>
            <param name="src">
            An array of <see cref="T:System.Byte" /> to convert.
            </param>
            <param name="srcOrder">
            A <see cref="T:WebSocketSharp.ByteOrder" /> that indicates the byte order of the <paramref name="src" />.
            </param>
            <typeparam name="T">
            The type of the return value. The T must be a value type.
            </typeparam>
            <exception cref="T:System.ArgumentNullException">
            Is thrown when the <paramref name="src" /> parameter passed to a method is invalid because it is <see langword="null" />.
            </exception>
        </member>
        <member name="M:WebSocketSharp.Ext.ToBytes``1(``0,WebSocketSharp.ByteOrder)">
            <summary>
            Converts the specified data to an array of <see cref="T:System.Byte" />.
            </summary>
            <returns>
            An array of <see cref="T:System.Byte" /> converted from the <paramref name="value" />.
            </returns>
            <param name="value">
            A T to convert.
            </param>
            <param name="order">
            A <see cref="T:WebSocketSharp.ByteOrder" /> that indicates the byte order of the return.
            </param>
            <typeparam name="T">
            The type of the <paramref name="value" />. The T must be a value type.
            </typeparam>
        </member>
        <member name="M:WebSocketSharp.Ext.ToHostOrder(System.Byte[],WebSocketSharp.ByteOrder)">
            <summary>
            Converts the order of the specified array of <see cref="T:System.Byte" /> to the host byte order.
            </summary>
            <returns>
            An array of <see cref="T:System.Byte" /> converted from the <paramref name="src" />.
            </returns>
            <param name="src">
            An array of <see cref="T:System.Byte" /> to convert.
            </param>
            <param name="srcOrder">
            A <see cref="T:WebSocketSharp.ByteOrder" /> that indicates the byte order of the <paramref name="src" />.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Is thrown when the <paramref name="src" /> parameter passed to a method is invalid because it is <see langword="null" />.
            </exception>
        </member>
        <member name="M:WebSocketSharp.Ext.ToString``1(``0[],System.String)">
            <summary>
            Converts the specified array to a <see cref="T:System.String" /> concatenated the specified separator string
            between each element of this array.
            </summary>
            <returns>
            A <see cref="T:System.String" /> converted from the <paramref name="array" /> parameter, or a <see cref="F:System.String.Empty" />
            if the length of the <paramref name="array" /> is zero.
            </returns>
            <param name="array">
            An array of T to convert.
            </param>
            <param name="separator">
            A <see cref="T:System.String" /> that contains a separator string.
            </param>
            <typeparam name="T">
            The type of elements in the <paramref name="array" />.
            </typeparam>
            <exception cref="T:System.ArgumentNullException">
            Is thrown when the <paramref name="array" /> parameter passed to a method is invalid because it is <see langword="null" />.
            </exception>
        </member>
        <member name="M:WebSocketSharp.Ext.ToUri(System.String)">
            <summary>
            Converts the specified <see cref="T:System.String" /> to a <see cref="T:System.Uri" /> object.
            </summary>
            <returns>
            A <see cref="T:System.Uri" /> converted from the <paramref name="uriString" /> parameter, or <see langword="null" />
            if the <paramref name="uriString" /> is <see langword="null" /> or <see cref="F:System.String.Empty" />.
            </returns>
            <param name="uriString">
            A <see cref="T:System.String" /> to convert.
            </param>
        </member>
        <member name="M:WebSocketSharp.Ext.TryCreateWebSocketUri(System.String,System.Uri@,System.String@)">
            <summary>
            Tries to create a new WebSocket <see cref="T:System.Uri" /> using the specified <paramref name="uriString" />.
            </summary>
            <returns>
                <c>true</c> if the WebSocket <see cref="T:System.Uri" /> was successfully created; otherwise, <c>false</c>.
            </returns>
            <param name="uriString">
            A <see cref="T:System.String" /> that contains a WebSocket URI.
            </param>
            <param name="result">
            When this method returns, contains a created WebSocket <see cref="T:System.Uri" /> if the <paramref name="uriString" /> parameter is valid WebSocket URI; otherwise, <see langword="null" />.
            </param>
            <param name="message">
            When this method returns, contains a error message <see cref="T:System.String" /> if the <paramref name="uriString" /> parameter is invalid WebSocket URI; otherwise, <c>String.Empty</c>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Is thrown when the <paramref name="uriString" /> parameter passed to a method is invalid because it is <see langword="null" />.
            </exception>
        </member>
        <member name="M:WebSocketSharp.Ext.UrlDecode(System.String)">
            <summary>
            URL-decodes the specified <see cref="T:System.String" />.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that receives a decoded string, or the <paramref name="s" /> parameter
            if the <paramref name="s" /> is <see langword="null" /> or <see cref="F:System.String.Empty" />.
            </returns>
            <param name="s">
            A <see cref="T:System.String" /> to decode.
            </param>
        </member>
        <member name="M:WebSocketSharp.Ext.UrlEncode(System.String)">
            <summary>
            URL-encodes the specified <see cref="T:System.String" />.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that receives a encoded string, or the <paramref name="s" /> parameter
            if the <paramref name="s" /> is <see langword="null" /> or <see cref="F:System.String.Empty" />.
            </returns>
            <param name="s">
            A <see cref="T:System.String" /> to encode.
            </param>
        </member>
        <member name="M:WebSocketSharp.Ext.WriteContent(WebSocketSharp.Net.HttpListenerResponse,System.Byte[])">
            <summary>
            Writes the specified content data using the specified <see cref="T:WebSocketSharp.Net.HttpListenerResponse" />.
            </summary>
            <param name="response">
            A <see cref="T:WebSocketSharp.Net.HttpListenerResponse" /> that contains a network stream to write a content data.
            </param>
            <param name="content">
            An array of <see cref="T:System.Byte" /> that contains a content data to write.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Is thrown when the <paramref name="response" /> parameter passed to a method is invalid because it is <see langword="null" />.
            </exception>
        </member>
        <member name="T:WebSocketSharp.WsState">
            <summary>
            Contains the values of the state of the WebSocket connection.
            </summary>
            <remarks>
            The <b>WsState</b> enumeration contains the values of the state of the WebSocket connection defined in
            <a href="http://www.w3.org/TR/websockets/#dom-websocket-readystate">The WebSocket API</a>.
            </remarks>
        </member>
        <member name="F:WebSocketSharp.WsState.CONNECTING">
            <summary>
            Equivalent to numeric value 0. Indicates that the connection has not yet been established.
            </summary>
        </member>
        <member name="F:WebSocketSharp.WsState.OPEN">
            <summary>
            Equivalent to numeric value 1. Indicates that the connection is established and communication is possible.
            </summary>
        </member>
        <member name="F:WebSocketSharp.WsState.CLOSING">
            <summary>
            Equivalent to numeric value 2. Indicates that the connection is going through the closing handshake, or the <b>Close</b> method has been invoked.
            </summary>
        </member>
        <member name="F:WebSocketSharp.WsState.CLOSED">
            <summary>
            Equivalent to numeric value 3. Indicates that the connection has been closed or could not be opened.
            </summary>
        </member>
        <member name="T:WebSocketSharp.MessageEventArgs">
            <summary>
            Contains the event data associated with a <see cref="E:WebSocketSharp.WebSocket.OnMessage" /> event.
            </summary>
            <remarks>
            The <see cref="E:WebSocketSharp.WebSocket.OnMessage" /> event occurs when the WebSocket receives a text or binary data frame.
            If you want to get the received data, you should access the <see cref="P:WebSocketSharp.MessageEventArgs.Data" /> or
            <see cref="P:WebSocketSharp.MessageEventArgs.RawData" /> properties.
            </remarks>
        </member>
        <member name="P:WebSocketSharp.MessageEventArgs.Data">
            <summary>
            Gets the received data as a <see cref="T:System.String" />.
            </summary>
            <value>
            A <see cref="T:System.String" /> that contains a received data.
            </value>
        </member>
        <member name="P:WebSocketSharp.MessageEventArgs.RawData">
            <summary>
            Gets the received data as an array of <see cref="T:System.Byte" />.
            </summary>
            <value>
            An array of <see cref="T:System.Byte" /> that contains a received data.
            </value>
        </member>
        <member name="P:WebSocketSharp.MessageEventArgs.Type">
            <summary>
            Gets the type of received data.
            </summary>
            <value>
            One of the <see cref="!:WebSocketSharp.Frame.Opcode" /> that indicates the type of received data.
            </value>
        </member>
        <member name="T:WebSocketSharp.CloseEventArgs">
            <summary>
            Contains the event data associated with a <see cref="E:WebSocketSharp.WebSocket.OnClose" /> event.
            </summary>
            <remarks>
            The <see cref="E:WebSocketSharp.WebSocket.OnClose" /> event occurs when the WebSocket receives a close control frame or
            the <c>WebSocket.Close</c> method is called. If you want to get the reason for closure, you should access the <see cref="P:WebSocketSharp.CloseEventArgs.Code" /> or
            <see cref="P:WebSocketSharp.CloseEventArgs.Reason" /> properties.
            </remarks>
        </member>
        <member name="P:WebSocketSharp.CloseEventArgs.Code">
            <summary>
            Gets the status code for closure.
            </summary>
            <value>
            A <see cref="T:System.UInt16" /> that contains a status code for closure.
            </value>
        </member>
        <member name="P:WebSocketSharp.CloseEventArgs.Reason">
            <summary>
            Gets the reason for closure.
            </summary>
            <value>
            A <see cref="T:System.String" /> that contains a reason for closure.
            </value>
        </member>
        <member name="P:WebSocketSharp.CloseEventArgs.WasClean">
            <summary>
            Indicates whether the connection closed cleanly or not.
            </summary>
            <value>
                <c>true</c> if the connection closed cleanly; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:WebSocketSharp.ByteOrder">
            <summary>
            Contains the values that indicate whether the byte order is a Little-endian or Big-endian.
            </summary>
        </member>
        <member name="F:WebSocketSharp.ByteOrder.LITTLE">
            <summary>
            Indicates a Little-endian.
            </summary>
        </member>
        <member name="F:WebSocketSharp.ByteOrder.BIG">
            <summary>
            Indicates a Big-endian.
            </summary>
        </member>
        <member name="T:WebSocketSharp.ErrorEventArgs">
            <summary>
            Contains the event data associated with a error event.
            </summary>
            <remarks>
            The error event occurs when this event sender gets an error.
            If you want to get the error message, you should access the <see cref="P:WebSocketSharp.ErrorEventArgs.Message" /> property.
            </remarks>
        </member>
        <member name="P:WebSocketSharp.ErrorEventArgs.Message">
            <summary>
            Gets the error message.
            </summary>
            <value>
            A <see cref="T:System.String" /> that contains a error message.
            </value>
        </member>
        <member name="T:WebSocketSharp.WebSocket">
            <summary>
            Implements the WebSocket interface.
            </summary>
            <remarks>
            The WebSocket class provides methods and properties for two-way communication using the WebSocket protocol (RFC 6455).
            </remarks>
        </member>
        <member name="M:WebSocketSharp.WebSocket.#ctor(System.String,System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:WebSocketSharp.WebSocket" /> class with the specified WebSocket URL and subprotocols.
            </summary>
            <param name="url">
            A <see cref="T:System.String" /> that contains the WebSocket URL.
            </param>
            <param name="protocols">
            An array of <see cref="T:System.String" /> that contains the WebSocket subprotocols if any.
            </param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="url" /> is <see langword="null" />.
            </exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="url" /> is not valid WebSocket URL.
            </exception>
        </member>
        <member name="M:WebSocketSharp.WebSocket.#ctor(System.String,System.EventHandler,System.EventHandler{WebSocketSharp.MessageEventArgs},System.EventHandler{WebSocketSharp.ErrorEventArgs},System.EventHandler{WebSocketSharp.CloseEventArgs},System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:WebSocketSharp.WebSocket" /> class with the specified WebSocket URL, OnOpen, OnMessage, OnError, OnClose event handlers and subprotocols.
            </summary>
            <param name="url">
            A <see cref="T:System.String" /> that contains the WebSocket URL.
            </param>
            <param name="onOpen">
            An OnOpen event handler.
            </param>
            <param name="onMessage">
            An OnMessage event handler.
            </param>
            <param name="onError">
            An OnError event handler.
            </param>
            <param name="onClose">
            An OnClose event handler.
            </param>
            <param name="protocols">
            An array of <see cref="T:System.String" /> that contains the WebSocket subprotocols if any.
            </param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="url" /> is <see langword="null" />.
            </exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="url" /> is not valid WebSocket URL.
            </exception>
        </member>
        <member name="E:WebSocketSharp.WebSocket.OnOpen">
            <summary>
            Occurs when the WebSocket connection has been established.
            </summary>
        </member>
        <member name="E:WebSocketSharp.WebSocket.OnMessage">
            <summary>
            Occurs when the WebSocket receives a data frame.
            </summary>
        </member>
        <member name="E:WebSocketSharp.WebSocket.OnError">
            <summary>
            Occurs when the WebSocket gets an error.
            </summary>
        </member>
        <member name="E:WebSocketSharp.WebSocket.OnClose">
            <summary>
            Occurs when the WebSocket receives a Close frame or the Close method is called.
            </summary>
        </member>
        <member name="P:WebSocketSharp.WebSocket.Extensions">
            <summary>
            Gets the extensions selected by the server.
            </summary>
            <value>
            A <see cref="T:System.String" /> that contains the extensions if any. By default, <c>String.Empty</c>. (Currently this will only ever be the <c>String.Empty</c>.)
            </value>
        </member>
        <member name="P:WebSocketSharp.WebSocket.IsAlive">
            <summary>
            Gets a value indicating whether a connection is alive.
            </summary>
            <value>
                <c>true</c> if the connection is alive; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WebSocketSharp.WebSocket.IsSecure">
            <summary>
            Gets a value indicating whether a connection is secure.
            </summary>
            <value>
                <c>true</c> if the connection is secure; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WebSocketSharp.WebSocket.Protocol">
            <summary>
            Gets the subprotocol selected by the server.
            </summary>
            <value>
            A <see cref="T:System.String" /> that contains the subprotocol if any. By default, <c>String.Empty</c>.
            </value>
        </member>
        <member name="P:WebSocketSharp.WebSocket.ReadyState">
            <summary>
            Gets the state of the connection.
            </summary>
            <value>
            One of the <see cref="T:WebSocketSharp.WsState" />. By default, <c>WsState.CONNECTING</c>.
            </value>
        </member>
        <member name="P:WebSocketSharp.WebSocket.Url">
            <summary>
            Gets the WebSocket URL.
            </summary>
            <value>
            A <see cref="T:System.Uri" /> that contains the WebSocket URL.
            </value>
        </member>
        <member name="M:WebSocketSharp.WebSocket.Close">
            <summary>
            Closes the connection and releases all associated resources after sends a Close control frame.
            </summary>
        </member>
        <member name="M:WebSocketSharp.WebSocket.Close(WebSocketSharp.CloseStatusCode)">
            <summary>
            Closes the connection and releases all associated resources after sends a Close control frame.
            </summary>
            <param name="code">
            A <see cref="!:WebSocketSharp.Frame.CloseStatusCode" /> that contains a status code indicating a reason for closure.
            </param>
        </member>
        <member name="M:WebSocketSharp.WebSocket.Close(System.UInt16)">
            <summary>
            Closes the connection and releases all associated resources after sends a Close control frame.
            </summary>
            <param name="code">
            A <see cref="T:System.UInt16" /> that contains a status code indicating a reason for closure.
            </param>
        </member>
        <member name="M:WebSocketSharp.WebSocket.Close(WebSocketSharp.CloseStatusCode,System.String)">
            <summary>
            Closes the connection and releases all associated resources after sends a Close control frame.
            </summary>
            <param name="code">
            A <see cref="!:WebSocketSharp.Frame.CloseStatusCode" /> that contains a status code indicating a reason for closure.
            </param>
            <param name="reason">
            A <see cref="T:System.String" /> that contains a reason for closure.
            </param>
        </member>
        <member name="M:WebSocketSharp.WebSocket.Close(System.UInt16,System.String)">
            <summary>
            Closes the connection and releases all associated resources after sends a Close control frame.
            </summary>
            <param name="code">
            A <see cref="T:System.UInt16" /> that contains a status code indicating a reason for closure.
            </param>
            <param name="reason">
            A <see cref="T:System.String" /> that contains a reason for closure.
            </param>
        </member>
        <member name="M:WebSocketSharp.WebSocket.Connect">
            <summary>
            Establishes a connection.
            </summary>
        </member>
        <member name="M:WebSocketSharp.WebSocket.Dispose">
            <summary>
            Closes the connection and releases all associated resources after sends a Close control frame.
            </summary>
            <remarks>
            Call <see cref="M:WebSocketSharp.WebSocket.Dispose" /> when you are finished using the <see cref="T:WebSocketSharp.WebSocket" />. The
            <see cref="M:WebSocketSharp.WebSocket.Dispose" /> method leaves the <see cref="T:WebSocketSharp.WebSocket" /> in an unusable state. After
            calling <see cref="M:WebSocketSharp.WebSocket.Dispose" />, you must release all references to the <see cref="T:WebSocketSharp.WebSocket" /> so
            the garbage collector can reclaim the memory that the <see cref="T:WebSocketSharp.WebSocket" /> was occupying.
            </remarks>
        </member>
        <member name="M:WebSocketSharp.WebSocket.Ping">
            <summary>
            Sends a Ping frame using the connection.
            </summary>
            <returns>
                <c>true</c> if the WebSocket receives a Pong frame in a time; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:WebSocketSharp.WebSocket.Ping(System.String)">
            <summary>
            Sends a Ping frame with a message using the connection.
            </summary>
            <param name="message">
            A <see cref="T:System.String" /> that contains the message to be sent.
            </param>
            <returns>
                <c>true</c> if the WebSocket receives a Pong frame in a time; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:WebSocketSharp.WebSocket.Send(System.String)">
            <summary>
            Sends a text data using the connection.
            </summary>
            <param name="data">
            A <see cref="T:System.String" /> that contains the text data to be sent.
            </param>
        </member>
        <member name="M:WebSocketSharp.WebSocket.Send(System.Byte[])">
            <summary>
            Sends a binary data using the connection.
            </summary>
            <param name="data">
            An array of <see cref="T:System.Byte" /> that contains the binary data to be sent.
            </param>
        </member>
        <member name="M:WebSocketSharp.WebSocket.Send(System.IO.FileInfo)">
            <summary>
            Sends a binary data using the connection.
            </summary>
            <param name="file">
            A <see cref="T:System.IO.FileInfo" /> that contains the binary data to be sent.
            </param>
        </member>
        <member name="M:WebSocketSharp.WebSocket.SendAsync(System.String,System.Action)">
            <summary>
            Sends a text data asynchronously using the connection.
            </summary>
            <param name="data">
            A <see cref="T:System.String" /> that contains the text data to be sent.
            </param>
            <param name="completed">
            An <see cref="T:System.Action" /> delegate that contains the method(s) that is called when an asynchronous operation completes.
            </param>
        </member>
        <member name="M:WebSocketSharp.WebSocket.SendAsync(System.Byte[],System.Action)">
            <summary>
            Sends a binary data asynchronously using the connection.
            </summary>
            <param name="data">
            An array of <see cref="T:System.Byte" /> that contains the binary data to be sent.
            </param>
            <param name="completed">
            An <see cref="T:System.Action" /> delegate that contains the method(s) that is called when an asynchronous operation completes.
            </param>
        </member>
        <member name="M:WebSocketSharp.WebSocket.SendAsync(System.IO.FileInfo,System.Action)">
            <summary>
            Sends a binary data asynchronously using the connection.
            </summary>
            <param name="file">
            A <see cref="T:System.IO.FileInfo" /> that contains the binary data to be sent.
            </param>
            <param name="completed">
            An <see cref="T:System.Action" /> delegate that contains the method(s) that is called when an asynchronous operation completes.
            </param>
        </member>
        <member name="T:WebSocketSharp.Server.WebSocketServer">
            <summary>
            Provides the functions of the server that receives the WebSocket connection requests.
            </summary>
            <remarks>
            The WebSocketServer class provides multi WebSocket service.
            </remarks>
        </member>
        <member name="M:WebSocketSharp.Server.WebSocketServer.#ctor">
            <summary>
            Initializes a new instance of the WebSocketServer class.
            </summary>
        </member>
        <member name="M:WebSocketSharp.Server.WebSocketServer.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the WebSocketServer class that listens for incoming connection attempts
            on the specified <paramref name="port" />.
            </summary>
            <param name="port">
            An <see cref="T:System.Int32" /> that contains a port number.
            </param>
        </member>
        <member name="M:WebSocketSharp.Server.WebSocketServer.#ctor(System.String)">
            <summary>
            Initializes a new instance of the WebSocketServer class that listens for incoming connection attempts
            on the specified WebSocket URL.
            </summary>
            <param name="url">
            A <see cref="T:System.String" /> that contains a WebSocket URL.
            </param>
        </member>
        <member name="M:WebSocketSharp.Server.WebSocketServer.#ctor(System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the WebSocketServer class that listens for incoming connection attempts
            on the specified <paramref name="port" /> and <paramref name="secure" />.
            </summary>
            <param name="port">
            An <see cref="T:System.Int32" /> that contains a port number.
            </param>
            <param name="secure">
            A <see cref="T:System.Boolean" /> that indicates providing a secure connection or not. (<c>true</c> indicates providing a secure connection.)
            </param>
        </member>
        <member name="M:WebSocketSharp.Server.WebSocketServer.#ctor(System.Net.IPAddress,System.Int32)">
            <summary>
            Initializes a new instance of the WebSocketServer class that listens for incoming connection attempts
            on the specified <paramref name="address" /> and <paramref name="port" />.
            </summary>
            <param name="address">
            An <see cref="T:System.Net.IPAddress" /> that contains an IP address.
            </param>
            <param name="port">
            An <see cref="T:System.Int32" /> that contains a port number.
            </param>
        </member>
        <member name="M:WebSocketSharp.Server.WebSocketServer.#ctor(System.Net.IPAddress,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the WebSocketServer class that listens for incoming connection attempts
            on the specified <paramref name="address" />, <paramref name="port" /> and <paramref name="secure" />.
            </summary>
            <param name="address">
            An <see cref="T:System.Net.IPAddress" /> that contains an IP address.
            </param>
            <param name="port">
            An <see cref="T:System.Int32" /> that contains a port number.
            </param>
            <param name="secure">
            A <see cref="T:System.Boolean" /> that indicates providing a secure connection or not. (<c>true</c> indicates providing a secure connection.)
            </param>
        </member>
        <member name="P:WebSocketSharp.Server.WebSocketServer.ServicePath">
            <summary>
            Gets the service paths.
            </summary>
            <value>
            An IEnumerable&lt;string&gt; that contains the service paths.
            </value>
        </member>
        <member name="P:WebSocketSharp.Server.WebSocketServer.Sweeped">
            <summary>
            Gets or sets a value indicating whether the server cleans up the inactive client.
            </summary>
            <value>
                <c>true</c> if the server cleans up the inactive client; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:WebSocketSharp.Server.WebSocketServer.AcceptWebSocket(System.Net.Sockets.TcpClient)">
            <summary>
            Accepts the WebSocket connection.
            </summary>
            <param name="client">
            A <see cref="T:System.Net.Sockets.TcpClient" /> that contains the TCP connection.
            </param>
        </member>
        <member name="M:WebSocketSharp.Server.WebSocketServer.AddService``1(System.String)">
            <summary>
            Adds the WebSocket service.
            </summary>
            <param name="absPath">
            A <see cref="T:System.String" /> that contains an absolute path associated with the WebSocket service.
            </param>
            <typeparam name="T">
            The type of the WebSocket service. The T must inherit the <see cref="T:WebSocketSharp.Server.WebSocketService" /> class.
            </typeparam>
        </member>
        <member name="M:WebSocketSharp.Server.WebSocketServer.Broadcast(System.String)">
            <summary>
            Broadcasts the specified <see cref="T:System.String" />.
            </summary>
            <param name="data">
            A <see cref="T:System.String" /> to broadcast.
            </param>
        </member>
        <member name="M:WebSocketSharp.Server.WebSocketServer.Stop">
            <summary>
            Stops receiving the WebSocket connection requests.
            </summary>
        </member>
        <member name="M:WebSocketSharp.Net.HttpUtility.HtmlDecode(System.String)">
            <summary>
            Decodes an HTML-encoded string and returns the decoded string.
            </summary>
            <param name="s">The HTML string to decode.</param>
            <returns>The decoded text.</returns>
        </member>
        <member name="M:WebSocketSharp.Net.HttpUtility.HtmlDecode(System.String,System.IO.TextWriter)">
            <summary>
            Decodes an HTML-encoded string and sends the resulting output to a TextWriter output stream.
            </summary>
            <param name="s">The HTML string to decode.</param>
            <param name="output">The TextWriter output stream containing the decoded string.</param>
        </member>
        <member name="M:WebSocketSharp.Net.HttpUtility.HtmlEncode(System.String)">
            <summary>
            HTML-encodes a string and returns the encoded string.
            </summary>
            <param name="s">The text string to encode.</param>
            <returns>The HTML-encoded text.</returns>
        </member>
        <member name="M:WebSocketSharp.Net.HttpUtility.HtmlEncode(System.String,System.IO.TextWriter)">
            <summary>
            HTML-encodes a string and sends the resulting output to a TextWriter output stream.
            </summary>
            <param name="s">The string to encode.</param>
            <param name="output">The TextWriter output stream containing the encoded string.</param>
        </member>
        <member name="T:WebSocketSharp.Server.WebSocketServerBase">
            <summary>
            Provides the basic functions of the server that receives the WebSocket connection requests.
            </summary>
            <remarks>
            The WebSocketServerBase class is an abstract class.
            </remarks>
        </member>
        <member name="M:WebSocketSharp.Server.WebSocketServerBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WebSocketSharp.Server.WebSocketServerBase" /> class.
            </summary>
        </member>
        <member name="M:WebSocketSharp.Server.WebSocketServerBase.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WebSocketSharp.Server.WebSocketServerBase" /> class that listens for incoming connection attempts
            on the specified WebSocket URL.
            </summary>
            <param name="url">
            A <see cref="T:System.String" /> that contains a WebSocket URL.
            </param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="url" /> is <see langword="null" />.
            </exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="url" /> is invalid.
            </exception>
        </member>
        <member name="M:WebSocketSharp.Server.WebSocketServerBase.#ctor(System.Net.IPAddress,System.Int32,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:WebSocketSharp.Server.WebSocketServerBase" /> class that listens for incoming connection attempts
            on the specified <paramref name="address" />, <paramref name="port" />, <paramref name="absPath" /> and <paramref name="secure" />.
            </summary>
            <param name="address">
            An <see cref="T:System.Net.IPAddress" /> that contains a local IP address.
            </param>
            <param name="port">
            An <see cref="T:System.Int32" /> that contains a port number.
            </param>
            <param name="absPath">
            A <see cref="T:System.String" /> that contains a absolute path.
            </param>
            <param name="secure">
            A <see cref="T:System.Boolean" /> that indicates providing a secure connection or not. (<c>true</c> indicates providing a secure connection.)
            </param>
            <exception cref="T:System.ArgumentNullException">
            Either <paramref name="address" /> or <paramref name="absPath" /> is <see langword="null" />.
            </exception>
            <exception cref="T:System.ArgumentException">
                <para>
                    <paramref name="absPath" /> is invalid.
            </para>
                <para>
            -or-
            </para>
                <para>
            Pair of <paramref name="port" /> and <paramref name="secure" /> is invalid.
            </para>
            </exception>
        </member>
        <member name="E:WebSocketSharp.Server.WebSocketServerBase.OnError">
            <summary>
            Occurs when this server gets an error.
            </summary>
        </member>
        <member name="P:WebSocketSharp.Server.WebSocketServerBase.BaseUri">
            <summary>
            Gets or sets the WebSocket URL on which to listen for incoming connection attempts.
            </summary>
            <value>
            A <see cref="T:System.Uri" /> that contains a WebSocket URL.
            </value>
        </member>
        <member name="P:WebSocketSharp.Server.WebSocketServerBase.Address">
            <summary>
            Gets the local IP address on which to listen for incoming connection attempts.
            </summary>
            <value>
            A <see cref="T:System.Net.IPAddress" /> that contains a local IP address.
            </value>
        </member>
        <member name="P:WebSocketSharp.Server.WebSocketServerBase.IsSecure">
            <summary>
            Gets a value indicating whether this server is secure.
            </summary>
            <value>
                <c>true</c> if this server is secure; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WebSocketSharp.Server.WebSocketServerBase.IsSelfHost">
            <summary>
            Gets a value indicating whether this server is self host.
            </summary>
            <value>
                <c>true</c> if this server is self host; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WebSocketSharp.Server.WebSocketServerBase.Port">
            <summary>
            Gets the port on which to listen for incoming connection attempts.
            </summary>
            <value>
            An <see cref="T:System.Int32" /> that contains a port number.
            </value>
        </member>
        <member name="M:WebSocketSharp.Server.WebSocketServerBase.AcceptWebSocket(System.Net.Sockets.TcpClient)">
            <summary>
            Accepts the WebSocket connection.
            </summary>
            <param name="client">
            A <see cref="T:System.Net.Sockets.TcpClient" /> that contains the WebSocket connection.
            </param>
        </member>
        <member name="M:WebSocketSharp.Server.WebSocketServerBase.Error(System.String)">
            <summary>
            Occurs the <see cref="E:WebSocketSharp.Server.WebSocketServerBase.OnError" /> event with the specified <paramref name="message" />.
            </summary>
            <param name="message">
            A <see cref="T:System.String" /> that contains an error message.
            </param>
        </member>
        <member name="M:WebSocketSharp.Server.WebSocketServerBase.Start">
            <summary>
            Starts to receive the WebSocket connection requests.
            </summary>
        </member>
        <member name="M:WebSocketSharp.Server.WebSocketServerBase.Stop">
            <summary>
            Stops receiving the WebSocket connection requests.
            </summary>
        </member>
        <member name="T:WebSocketSharp.Server.IServiceHost">
            <summary>
            Exposes the methods and property for the WebSocket service host.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="P:WebSocketSharp.Server.IServiceHost.Sweeped">
            <summary>
            Gets or sets a value indicating whether the WebSocket service host cleans up the inactive service client.
            </summary>
            <value>
                <c>true</c> if the WebSocket service host cleans up the inactive service client; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:WebSocketSharp.Server.IServiceHost.BindWebSocket(WebSocketSharp.WebSocket)">
            <summary>
            Binds the specified <see cref="T:WebSocketSharp.WebSocket" /> instance to the WebSocket service.
            </summary>
            <param name="socket">
            An <see cref="T:WebSocketSharp.WebSocket" /> to bind.
            </param>
        </member>
        <member name="M:WebSocketSharp.Server.IServiceHost.Broadcast(System.String)">
            <summary>
            Broadcasts the specified <see cref="T:System.String" />.
            </summary>
            <param name="data">
            A <see cref="T:System.String" /> to broadcast.
            </param>
        </member>
        <member name="M:WebSocketSharp.Server.IServiceHost.Start">
            <summary>
            Starts the WebSocket service host.
            </summary>
        </member>
        <member name="M:WebSocketSharp.Server.IServiceHost.Stop">
            <summary>
            Stops the WebSocket service host.
            </summary>
        </member>
        <member name="T:WebSocketSharp.Server.WebSocketServiceHost`1">
            <summary>
            Provides the functions of the server that receives the WebSocket connection requests.
            </summary>
            <remarks>
            The WebSocketServiceHost&lt;T&gt; class provides single WebSocket service.
            </remarks>
            <typeparam name="T">
            The type of the WebSocket service that the server provides. The T must inherit the <see cref="T:WebSocketSharp.Server.WebSocketService" /> class.
            </typeparam>
        </member>
        <member name="M:WebSocketSharp.Server.WebSocketServiceHost`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the WebSocketServiceHost&lt;T&gt; class that listens for incoming connection attempts
            on the specified <paramref name="port" />.
            </summary>
            <param name="port">
            An <see cref="T:System.Int32" /> that contains a port number.
            </param>
        </member>
        <member name="M:WebSocketSharp.Server.WebSocketServiceHost`1.#ctor(System.String)">
            <summary>
            Initializes a new instance of the WebSocketServiceHost&lt;T&gt; class that listens for incoming connection attempts
            on the specified WebSocket URL.
            </summary>
            <param name="url">
            A <see cref="T:System.String" /> that contains a WebSocket URL.
            </param>
        </member>
        <member name="M:WebSocketSharp.Server.WebSocketServiceHost`1.#ctor(System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the WebSocketServiceHost&lt;T&gt; class that listens for incoming connection attempts
            on the specified <paramref name="port" /> and <paramref name="secure" />.
            </summary>
            <param name="port">
            An <see cref="T:System.Int32" /> that contains a port number.
            </param>
            <param name="secure">
            A <see cref="T:System.Boolean" /> that indicates providing a secure connection or not. (<c>true</c> indicates providing a secure connection.)
            </param>
        </member>
        <member name="M:WebSocketSharp.Server.WebSocketServiceHost`1.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of the WebSocketServiceHost&lt;T&gt; class that listens for incoming connection attempts
            on the specified <paramref name="port" /> and <paramref name="absPath" />.
            </summary>
            <param name="port">
            An <see cref="T:System.Int32" /> that contains a port number.
            </param>
            <param name="absPath">
            A <see cref="T:System.String" /> that contains an absolute path.
            </param>
        </member>
        <member name="M:WebSocketSharp.Server.WebSocketServiceHost`1.#ctor(System.Int32,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the WebSocketServiceHost&lt;T&gt; class that listens for incoming connection attempts
            on the specified <paramref name="port" />, <paramref name="absPath" /> and <paramref name="secure" />.
            </summary>
            <param name="port">
            An <see cref="T:System.Int32" /> that contains a port number.
            </param>
            <param name="absPath">
            A <see cref="T:System.String" /> that contains an absolute path.
            </param>
            <param name="secure">
            A <see cref="T:System.Boolean" /> that indicates providing a secure connection or not. (<c>true</c> indicates providing a secure connection.)
            </param>
        </member>
        <member name="M:WebSocketSharp.Server.WebSocketServiceHost`1.#ctor(System.Net.IPAddress,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the WebSocketServiceHost&lt;T&gt; class that listens for incoming connection attempts
            on the specified <paramref name="address" />, <paramref name="port" /> and <paramref name="absPath" />.
            </summary>
            <param name="address">
            An <see cref="T:System.Net.IPAddress" /> that contains an IP address.
            </param>
            <param name="port">
            An <see cref="T:System.Int32" /> that contains a port number.
            </param>
            <param name="absPath">
            A <see cref="T:System.String" /> that contains an absolute path.
            </param>
        </member>
        <member name="M:WebSocketSharp.Server.WebSocketServiceHost`1.#ctor(System.Net.IPAddress,System.Int32,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the WebSocketServiceHost&lt;T&gt; class that listens for incoming connection attempts
            on the specified <paramref name="address" />, <paramref name="port" />, <paramref name="absPath" /> and <paramref name="secure" />.
            </summary>
            <param name="address">
            An <see cref="T:System.Net.IPAddress" /> that contains an IP address.
            </param>
            <param name="port">
            An <see cref="T:System.Int32" /> that contains a port number.
            </param>
            <param name="absPath">
            A <see cref="T:System.String" /> that contains an absolute path.
            </param>
            <param name="secure">
            A <see cref="T:System.Boolean" /> that indicates providing a secure connection or not. (<c>true</c> indicates providing a secure connection.)
            </param>
        </member>
        <member name="P:WebSocketSharp.Server.WebSocketServiceHost`1.Sweeped">
            <summary>
            Gets or sets a value indicating whether the server cleans up the inactive client.
            </summary>
            <value>
                <c>true</c> if the server cleans up the inactive client; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WebSocketSharp.Server.WebSocketServiceHost`1.Uri">
            <summary>
            Gets the WebSocket URL on which to listen for incoming connection attempts.
            </summary>
            <value>
            A <see cref="T:System.Uri" /> that contains a WebSocket URL.
            </value>
        </member>
        <member name="M:WebSocketSharp.Server.WebSocketServiceHost`1.WebSocketSharp#Server#IServiceHost#BindWebSocket(WebSocketSharp.WebSocket)">
            <summary>
            Binds the specified <see cref="T:WebSocketSharp.WebSocket" /> instance to the WebSocket service.
            </summary>
            <param name="socket">
            A <see cref="T:WebSocketSharp.WebSocket" /> to bind.
            </param>
        </member>
        <member name="M:WebSocketSharp.Server.WebSocketServiceHost`1.AcceptWebSocket(System.Net.Sockets.TcpClient)">
            <summary>
            Accepts the WebSocket connection.
            </summary>
            <param name="client">
            A <see cref="T:System.Net.Sockets.TcpClient" /> that contains the TCP connection.
            </param>
        </member>
        <member name="M:WebSocketSharp.Server.WebSocketServiceHost`1.Broadcast(System.String)">
            <summary>
            Broadcasts the specified <see cref="T:System.String" />.
            </summary>
            <param name="data">
            A <see cref="T:System.String" /> to broadcast.
            </param>
        </member>
        <member name="M:WebSocketSharp.Server.WebSocketServiceHost`1.Broadping(System.String)">
            <summary>
            Pings with the specified <see cref="T:System.String" /> to all clients.
            </summary>
            <param name="message">
            A <see cref="T:System.String" /> that contains a message.
            </param>
        </member>
        <member name="M:WebSocketSharp.Server.WebSocketServiceHost`1.Stop">
            <summary>
            Stops receiving the WebSocket connection requests.
            </summary>
        </member>
        <member name="T:WebSocketSharp.CloseStatusCode">
            <summary>
            Contains the values of the status codes for the WebSocket connection closure.
            </summary>
            <remarks>
                <para>
            The <b>CloseStatusCode</b> enumeration contains the values of the status codes for the WebSocket connection closure
            defined in <a href="http://tools.ietf.org/html/rfc6455#section-7.4.1">RFC 6455</a> for the WebSocket protocol.
            </para>
                <para>
            "<b>Reserved value</b>" must not be set as a status code in a close control frame by an endpoint.
            It is designated for use in applications expecting a status code to indicate that connection
            was closed due to a system grounds.
            </para>
            </remarks>
        </member>
        <member name="F:WebSocketSharp.CloseStatusCode.NORMAL">
            <summary>
            Equivalent to close status 1000. Indicates a normal closure.
            </summary>
        </member>
        <member name="F:WebSocketSharp.CloseStatusCode.AWAY">
            <summary>
            Equivalent to close status 1001. Indicates that an endpoint is "going away".
            </summary>
        </member>
        <member name="F:WebSocketSharp.CloseStatusCode.PROTOCOL_ERROR">
            <summary>
            Equivalent to close status 1002. Indicates that an endpoint is terminating the connection
            due to a protocol error.
            </summary>
        </member>
        <member name="F:WebSocketSharp.CloseStatusCode.INCORRECT_DATA">
            <summary>
            Equivalent to close status 1003. Indicates that an endpoint is terminating the connection
            because it has received a type of data it cannot accept.
            </summary>
        </member>
        <member name="F:WebSocketSharp.CloseStatusCode.UNDEFINED">
            <summary>
            Equivalent to close status 1004. Still undefined. Reserved value.
            </summary>
        </member>
        <member name="F:WebSocketSharp.CloseStatusCode.NO_STATUS_CODE">
            <summary>
            Equivalent to close status 1005. Indicates that no status code was actually present. Reserved value.
            </summary>
        </member>
        <member name="F:WebSocketSharp.CloseStatusCode.ABNORMAL">
            <summary>
            Equivalent to close status 1006. Indicates that the connection was closed abnormally. Reserved value.
            </summary>
        </member>
        <member name="F:WebSocketSharp.CloseStatusCode.INCONSISTENT_DATA">
            <summary>
            Equivalent to close status 1007. Indicates that an endpoint is terminating the connection
            because it has received data within a message that was not consistent with the type of the message.
            </summary>
        </member>
        <member name="F:WebSocketSharp.CloseStatusCode.POLICY_VIOLATION">
            <summary>
            Equivalent to close status 1008. Indicates that an endpoint is terminating the connection
            because it has received a message that violates its policy.
            </summary>
        </member>
        <member name="F:WebSocketSharp.CloseStatusCode.TOO_BIG">
            <summary>
            Equivalent to close status 1009. Indicates that an endpoint is terminating the connection
            because it has received a message that is too big for it to process.
            </summary>
        </member>
        <member name="F:WebSocketSharp.CloseStatusCode.IGNORE_EXTENSION">
            <summary>
            Equivalent to close status 1010. Indicates that an endpoint (client) is terminating the connection
            because it has expected the server to negotiate one or more extension, but the server didn't return
            them in the response message of the WebSocket handshake.
            </summary>
        </member>
        <member name="F:WebSocketSharp.CloseStatusCode.SERVER_ERROR">
            <summary>
            Equivalent to close status 1011. Indicates that a server is terminating the connection because it encountered
            an unexpected condition that prevented it from fulfilling the request.
            </summary>
        </member>
        <member name="F:WebSocketSharp.CloseStatusCode.TLS_HANDSHAKE_FAILURE">
            <summary>
            Equivalent to close status 1015. Indicates that the connection was closed due to a failure to perform
            a TLS handshake. Reserved value.
            </summary>
        </member>
        <member name="T:WebSocketSharp.Opcode">
            <summary>
            Contains the values of the opcodes that denotes the frame type of the WebSocket frame.
            </summary>
            <remarks>
            The <b>Opcode</b> enumeration contains the values of the opcodes defined in
            <see href="http://tools.ietf.org/html/rfc6455#section-5.2">RFC 6455</see> for the WebSocket protocol.
            </remarks>
        </member>
        <member name="F:WebSocketSharp.Opcode.CONT">
            <summary>
            Equivalent to numeric value 0. Indicates a continuation frame.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Opcode.TEXT">
            <summary>
            Equivalent to numeric value 1. Indicates a text frame.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Opcode.BINARY">
            <summary>
            Equivalent to numeric value 2. Indicates a binary frame.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Opcode.CLOSE">
            <summary>
            Equivalent to numeric value 8. Indicates a connection close frame.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Opcode.PING">
            <summary>
            Equivalent to numeric value 9. Indicates a ping frame.
            </summary>
        </member>
        <member name="F:WebSocketSharp.Opcode.PONG">
            <summary>
            Equivalent to numeric value 10. Indicates a pong frame.
            </summary>
        </member>
        <member name="T:WebSocketSharp.Net.WebSockets.HttpListenerWebSocketContext">
            <summary>
            Provides access to the WebSocket connection request objects received by the <see cref="T:WebSocketSharp.Net.HttpListener" /> class.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="P:WebSocketSharp.Net.WebSockets.HttpListenerWebSocketContext.CookieCollection">
            <summary>
            Gets the cookies used in the WebSocket opening handshake.
            </summary>
            <value>
            A <see cref="T:WebSocketSharp.Net.CookieCollection" /> that contains the cookies.
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.WebSockets.HttpListenerWebSocketContext.Headers">
            <summary>
            Gets the HTTP headers used in the WebSocket opening handshake.
            </summary>
            <value>
            A <see cref="T:System.Collections.Specialized.NameValueCollection" /> that contains the HTTP headers.
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.WebSockets.HttpListenerWebSocketContext.IsAuthenticated">
            <summary>
            Gets a value indicating whether the client is authenticated.
            </summary>
            <value>
                <c>true</c> if the client is authenticated; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.WebSockets.HttpListenerWebSocketContext.IsLocal">
            <summary>
            Gets a value indicating whether the client connected from the local computer.
            </summary>
            <value>
                <c>true</c> if the client connected from the local computer; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.WebSockets.HttpListenerWebSocketContext.IsSecureConnection">
            <summary>
            Gets a value indicating whether the WebSocket connection is secured.
            </summary>
            <value>
                <c>true</c> if the WebSocket connection is secured; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.WebSockets.HttpListenerWebSocketContext.Origin">
            <summary>
            Gets the value of the Origin header field used in the WebSocket opening handshake.
            </summary>
            <value>
            A <see cref="T:System.String" /> that contains the value of the Origin header field.
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.WebSockets.HttpListenerWebSocketContext.Path">
            <summary>
            Gets the absolute path of the requested WebSocket URI.
            </summary>
            <value>
            A <see cref="T:System.String" /> that contains the absolute path.
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.WebSockets.HttpListenerWebSocketContext.RequestUri">
            <summary>
            Gets the WebSocket URI requested by the client.
            </summary>
            <value>
            A <see cref="T:System.Uri" /> that contains the WebSocket URI.
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.WebSockets.HttpListenerWebSocketContext.SecWebSocketKey">
            <summary>
            Gets the value of the Sec-WebSocket-Key header field used in the WebSocket opening handshake.
            </summary>
            <remarks>
            The SecWebSocketKey property provides a part of the information used by the server to prove that it received a valid WebSocket opening handshake.
            </remarks>
            <value>
            A <see cref="T:System.String" /> that contains the value of the Sec-WebSocket-Key header field.
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.WebSockets.HttpListenerWebSocketContext.SecWebSocketProtocols">
            <summary>
            Gets the values of the Sec-WebSocket-Protocol header field used in the WebSocket opening handshake.
            </summary>
            <remarks>
            The SecWebSocketProtocols property indicates the subprotocols of the WebSocket connection.
            </remarks>
            <value>
            An IEnumerable&lt;string&gt; that contains the values of the Sec-WebSocket-Protocol header field.
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.WebSockets.HttpListenerWebSocketContext.SecWebSocketVersion">
            <summary>
            Gets the value of the Sec-WebSocket-Version header field used in the WebSocket opening handshake.
            </summary>
            <remarks>
            The SecWebSocketVersion property indicates the WebSocket protocol version of the connection.
            </remarks>
            <value>
            A <see cref="T:System.String" /> that contains the value of the Sec-WebSocket-Version header field.
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.WebSockets.HttpListenerWebSocketContext.ServerEndPoint">
            <summary>
            Gets the server endpoint as an IP address and a port number.
            </summary>
            <value>
            A <see cref="T:System.Net.IPEndPoint" /> that contains the server endpoint.
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.WebSockets.HttpListenerWebSocketContext.User">
            <summary>
            Gets the client information (identity, authentication information and security roles).
            </summary>
            <value>
            An <see cref="T:System.Security.Principal.IPrincipal" /> that contains the client information.
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.WebSockets.HttpListenerWebSocketContext.UserEndPoint">
            <summary>
            Gets the client endpoint as an IP address and a port number.
            </summary>
            <value>
            A <see cref="T:System.Net.IPEndPoint" /> that contains the client endpoint.
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.WebSockets.HttpListenerWebSocketContext.WebSocket">
            <summary>
            Gets the WebSocket instance used for two-way communication between client and server.
            </summary>
            <value>
            A <see cref="T:WebSocketSharp.WebSocket" />.
            </value>
        </member>
        <member name="T:WebSocketSharp.Net.WebSockets.TcpListenerWebSocketContext">
            <summary>
            Provides access to the WebSocket connection request objects received by the <see cref="T:System.Net.Sockets.TcpListener" /> class.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="P:WebSocketSharp.Net.WebSockets.TcpListenerWebSocketContext.CookieCollection">
            <summary>
            Gets the cookies used in the WebSocket opening handshake.
            </summary>
            <value>
            A <see cref="T:WebSocketSharp.Net.CookieCollection" /> that contains the cookies.
            </value>
            <exception cref="T:System.NotImplementedException">
            This property is not implemented.
            </exception>
        </member>
        <member name="P:WebSocketSharp.Net.WebSockets.TcpListenerWebSocketContext.Headers">
            <summary>
            Gets the HTTP headers used in the WebSocket opening handshake.
            </summary>
            <value>
            A <see cref="T:System.Collections.Specialized.NameValueCollection" /> that contains the HTTP headers.
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.WebSockets.TcpListenerWebSocketContext.IsAuthenticated">
            <summary>
            Gets a value indicating whether the client is authenticated.
            </summary>
            <value>
                <c>true</c> if the client is authenticated; otherwise, <c>false</c>.
            </value>
            <exception cref="T:System.NotImplementedException">
            This property is not implemented.
            </exception>
        </member>
        <member name="P:WebSocketSharp.Net.WebSockets.TcpListenerWebSocketContext.IsLocal">
            <summary>
            Gets a value indicating whether the client connected from the local computer.
            </summary>
            <value>
                <c>true</c> if the client connected from the local computer; otherwise, <c>false</c>.
            </value>
            <exception cref="T:System.NotImplementedException">
            This property is not implemented.
            </exception>
        </member>
        <member name="P:WebSocketSharp.Net.WebSockets.TcpListenerWebSocketContext.IsSecureConnection">
            <summary>
            Gets a value indicating whether the WebSocket connection is secured.
            </summary>
            <value>
                <c>true</c> if the WebSocket connection is secured; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.WebSockets.TcpListenerWebSocketContext.Origin">
            <summary>
            Gets the value of the Origin header field used in the WebSocket opening handshake.
            </summary>
            <value>
            A <see cref="T:System.String" /> that contains the value of the Origin header field.
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.WebSockets.TcpListenerWebSocketContext.Path">
            <summary>
            Gets the absolute path of the requested WebSocket URI.
            </summary>
            <value>
            A <see cref="T:System.String" /> that contains the absolute path.
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.WebSockets.TcpListenerWebSocketContext.RequestUri">
            <summary>
            Gets the WebSocket URI requested by the client.
            </summary>
            <value>
            A <see cref="T:System.Uri" /> that contains the WebSocket URI.
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.WebSockets.TcpListenerWebSocketContext.SecWebSocketKey">
            <summary>
            Gets the value of the Sec-WebSocket-Key header field used in the WebSocket opening handshake.
            </summary>
            <remarks>
            The SecWebSocketKey property provides a part of the information used by the server to prove that it received a valid WebSocket opening handshake.
            </remarks>
            <value>
            A <see cref="T:System.String" /> that contains the value of the Sec-WebSocket-Key header field.
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.WebSockets.TcpListenerWebSocketContext.SecWebSocketProtocols">
            <summary>
            Gets the values of the Sec-WebSocket-Protocol header field used in the WebSocket opening handshake.
            </summary>
            <remarks>
            The SecWebSocketProtocols property indicates the subprotocols of the WebSocket connection.
            </remarks>
            <value>
            An IEnumerable&lt;string&gt; that contains the values of the Sec-WebSocket-Protocol header field.
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.WebSockets.TcpListenerWebSocketContext.SecWebSocketVersion">
            <summary>
            Gets the value of the Sec-WebSocket-Version header field used in the WebSocket opening handshake.
            </summary>
            <remarks>
            The SecWebSocketVersion property indicates the WebSocket protocol version of the connection.
            </remarks>
            <value>
            A <see cref="T:System.String" /> that contains the value of the Sec-WebSocket-Version header field.
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.WebSockets.TcpListenerWebSocketContext.ServerEndPoint">
            <summary>
            Gets the server endpoint as an IP address and a port number.
            </summary>
            <value>
            A <see cref="T:System.Net.IPEndPoint" /> that contains the server endpoint.
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.WebSockets.TcpListenerWebSocketContext.User">
            <summary>
            Gets the client information (identity, authentication information and security roles).
            </summary>
            <value>
            An <see cref="T:System.Security.Principal.IPrincipal" /> that contains the client information.
            </value>
            <exception cref="T:System.NotImplementedException">
            This property is not implemented.
            </exception>
        </member>
        <member name="P:WebSocketSharp.Net.WebSockets.TcpListenerWebSocketContext.UserEndPoint">
            <summary>
            Gets the client endpoint as an IP address and a port number.
            </summary>
            <value>
            A <see cref="T:System.Net.IPEndPoint" /> that contains the client endpoint.
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.WebSockets.TcpListenerWebSocketContext.WebSocket">
            <summary>
            Gets the WebSocket instance used for two-way communication between client and server.
            </summary>
            <value>
            A <see cref="T:WebSocketSharp.WebSocket" />.
            </value>
        </member>
        <member name="T:WebSocketSharp.Net.WebSockets.WebSocketContext">
            <summary>
            Provides access to the WebSocket connection request objects.
            </summary>
            <remarks>
            The WebSocketContext class is an abstract class.
            </remarks>
        </member>
        <member name="M:WebSocketSharp.Net.WebSockets.WebSocketContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WebSocketSharp.Net.WebSockets.WebSocketContext" /> class.
            </summary>
        </member>
        <member name="P:WebSocketSharp.Net.WebSockets.WebSocketContext.CookieCollection">
            <summary>
            Gets the cookies used in the WebSocket opening handshake.
            </summary>
            <value>
            A <see cref="T:WebSocketSharp.Net.CookieCollection" /> that contains the cookies.
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.WebSockets.WebSocketContext.Headers">
            <summary>
            Gets the HTTP headers used in the WebSocket opening handshake.
            </summary>
            <value>
            A <see cref="T:System.Collections.Specialized.NameValueCollection" /> that contains the HTTP headers.
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.WebSockets.WebSocketContext.IsAuthenticated">
            <summary>
            Gets a value indicating whether the client is authenticated.
            </summary>
            <value>
                <c>true</c> if the client is authenticated; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.WebSockets.WebSocketContext.IsLocal">
            <summary>
            Gets a value indicating whether the client connected from the local computer.
            </summary>
            <value>
                <c>true</c> if the client connected from the local computer; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.WebSockets.WebSocketContext.IsSecureConnection">
            <summary>
            Gets a value indicating whether the WebSocket connection is secured.
            </summary>
            <value>
                <c>true</c> if the WebSocket connection is secured; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.WebSockets.WebSocketContext.Origin">
            <summary>
            Gets the value of the Origin header field used in the WebSocket opening handshake.
            </summary>
            <value>
            A <see cref="T:System.String" /> that contains the value of the Origin header field.
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.WebSockets.WebSocketContext.RequestUri">
            <summary>
            Gets the WebSocket URI requested by the client.
            </summary>
            <value>
            A <see cref="T:System.Uri" /> that contains the WebSocket URI.
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.WebSockets.WebSocketContext.SecWebSocketKey">
            <summary>
            Gets the value of the Sec-WebSocket-Key header field used in the WebSocket opening handshake.
            </summary>
            <remarks>
            The SecWebSocketKey property provides a part of the information used by the server to prove that it received a valid WebSocket opening handshake.
            </remarks>
            <value>
            A <see cref="T:System.String" /> that contains the value of the Sec-WebSocket-Key header field.
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.WebSockets.WebSocketContext.SecWebSocketProtocols">
            <summary>
            Gets the values of the Sec-WebSocket-Protocol header field used in the WebSocket opening handshake.
            </summary>
            <remarks>
            The SecWebSocketProtocols property indicates the subprotocols of the WebSocket connection.
            </remarks>
            <value>
            An IEnumerable&lt;string&gt; that contains the values of the Sec-WebSocket-Protocol header field.
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.WebSockets.WebSocketContext.SecWebSocketVersion">
            <summary>
            Gets the value of the Sec-WebSocket-Version header field used in the WebSocket opening handshake.
            </summary>
            <remarks>
            The SecWebSocketVersion property indicates the WebSocket protocol version of the connection.
            </remarks>
            <value>
            A <see cref="T:System.String" /> that contains the value of the Sec-WebSocket-Version header field.
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.WebSockets.WebSocketContext.User">
            <summary>
            Gets the client information (identity, authentication information and security roles).
            </summary>
            <value>
            An <see cref="T:System.Security.Principal.IPrincipal" /> that contains the client information.
            </value>
        </member>
        <member name="P:WebSocketSharp.Net.WebSockets.WebSocketContext.WebSocket">
            <summary>
            Gets the WebSocket instance used for two-way communication between client and server.
            </summary>
            <value>
            A <see cref="T:WebSocketSharp.WebSocket" />.
            </value>
        </member>
    </members>
</doc>
